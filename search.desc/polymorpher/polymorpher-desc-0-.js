searchState.loadedDescShard("polymorpher", 0, "Polymorpher\nContains 4 points forming a cubic Bézier curve: 2 anchor …\nWhile a polygon’s shape can be drawn solely using a list …\nA structure designed to obtain transition cubics between …\n<code>RoundedPolygon</code> allows simple construction of polygonal …\nProvides a more convenient and familiar way to create …\nA flattened version of the <code>Feature</code>s.\nGiven a cubic and a measure that should be between 0 and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nContains wrappers over geometric types from <code>euclid</code>, an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns size of given cubic, according to however the …\nContains built-in functions for generating shapes.\nContains 4 points forming a cubic Bézier curve: 2 anchor …\nReturns an axis-aligned bounding box describing bounds of …\nReturns a cubic Bézier curve that forms a circular arc.\nReturns a point on the curve for parameter <code>t</code>, representing …\nReturns a cubic Bézier curve with points swapped (anchor …\nReturns two <code>Cubic</code>s, created by splitting this curve at the …\nReturns a cubic Bézier curve that forms a straight line.\nReturns a cubic Bézier curve with points transformed …\nReturns <code>true</code> if the length between anchor points is zero.\nWhile a polygon’s shape can be drawn solely using a list …\nReturns <code>true</code> if the feature type is corner.\nReturns the result of calling <code>func</code> if the type of feature …\nReturns a <code>Feature</code> with cubics transformed using the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nPanics\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGiven a cubic and a measure that should be between 0 and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns size of given cubic, according to however the …\nA structure designed to obtain transition cubics between …\nAdds a transition state (based on the provided <code>progress</code>) …\nReturns the transition state between the start and end …\nReturns a path with a drawn transition state (based on the …\nMatches the <code>Cubic</code>s of the start and end <code>RoundedPolygon</code>s, …\nA necessary trait for creating paths from polygons or …\nProvides a more convenient and familiar way to create …\nConsuming itself, it creates and returns <code>RoundedPolygon</code>, …\nConsuming itself, it creates and returns <code>RoundedPolygon</code>, …\nConsuming itself, it creates and returns <code>RoundedPolygon</code>, …\nConsuming itself, it creates and returns <code>RoundedPolygon</code>, …\nConsuming itself, it creates and returns <code>RoundedPolygon</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the center point for the resulting rounded polygon.\nSets the height of the resulting shape.\nSet inner radius for the resulting star shape, which must …\nSets the inner radius ratio for the resulting star shape, …\nSets the common <code>CornerRounding</code> for each of the vertices on …\nSets the common <code>CornerRounding</code> for each of the vertices on …\nSets the radius of the resulting shape.\nSets the common <code>CornerRounding</code> for each of the vertices.\nSets the common <code>CornerRounding</code> for each of the rectangle …\nSets <code>CornerRounding</code> for each individual corner. The size …\nSets <code>CornerRounding</code> for each individual vertex. The size …\nSets the size of the resulting shape.\nSets the amount by which the arc is “smoothed” by …\nSets the start location which determines how far along the …\nSets the vertex spacing factor, which determines how …\nSets the number of vertices in the resulting polygon with …\nSets the width of the resulting shape.\n<code>RoundedPolygon</code> allows simple construction of polygonal …\nReturns an axis-aligned bounding box describing bounds of …\nAdds a rounded polygon to the <code>builder</code>.\nReturns a path with a drawn rounded polygon. Path is …\nReturns a <code>RoundedPolygonBuilder</code> for creating a circle.\nA flattened version of the <code>Feature</code>s.\nReturns the argument unchanged.\nCreates a rounded polygon from a set of points that are …\nCreates a rounded polygon from a set of points that are …\nPanics\nCalls <code>U::from(self)</code>.\nMoves and resizes <code>RoundedPolygon</code>, so it’s completely …\nReturns a <code>RoundedPolygonBuilder</code> for creating a pill.\nReturns a <code>RoundedPolygonBuilder</code> for creating a pill star.\nReturns a <code>RoundedPolygonBuilder</code> for creating a rectangle.\nReturns a <code>RoundedPolygonBuilder</code> for creating a star.\nReturns a <code>RoundedPolygon</code> with features transformed using …\nAn arch shape.\nAn arrow shape.\nA boom shape.\nA bun shape.\nA burst shape.\nA circle shape.\nA clam-shell shape.\nA 4-leaf clover shape.\nAn 8-leaf clover shape.\nA 12-sided cookie shape.\nA 4-sided cookie shape.\nA 6-sided cookie shape.\nA 7-sided cookie shape.\nA 9-sided cookie shape.\nA diamond shape.\nA fan shape\nA flower shape.\nA gem shape.\nA ghost-ish shape.\nA heart shape.\nAn oval shape.\nA pentagon shape.\nA pill shape.\nA pixel-circle shape.\nA pixel-triangle shape.\nA puffy shape.\nA puffy-diamond shape.\nA semi-circle shape.\nA slanted square shape\nA soft-boom shape.\nA soft-burst shape.\nAn rounded square shape.\nA sunny shape.\nA rounded triangle shape.\nA very-sunny shape.")